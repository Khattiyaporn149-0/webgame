// --- Firestore imports ---
import { db, ts } from "./firebase.js";
import {
  doc, getDoc, setDoc, collection, addDoc, getDocs, deleteDoc
} from "https://www.gstatic.com/firebasejs/10.14.1/firebase-firestore.js";

// üìå ‡∏≠‡πà‡∏≤‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
const playerName = localStorage.getItem('ggd.name') || 'Guest';

// üìå ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö
const btnBack = document.getElementById('btnBack');
if (btnBack) btnBack.addEventListener('click', () => (window.location.href = 'index.html'));

// üìå ‡∏™‡∏∏‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡πâ‡∏≠‡∏á 4 ‡∏ï‡∏±‡∏ß
function genCode() {
  return Math.random().toString(36).substring(2, 6).toUpperCase();
}

// üìå ‡∏™‡∏µ‡∏™‡∏∏‡πà‡∏°
function randColor() {
  const hues = [150, 180, 200, 220, 260, 300];
  const h = hues[Math.floor(Math.random() * hues.length)];
  return `hsl(${h} 70% 65%)`;
}

// üìå ‡∏õ‡∏∏‡πà‡∏° CREATE
document.getElementById('btnCreate').addEventListener('click', async () => {
  const nameEl = document.getElementById('roomName');
  const roomNameInput = nameEl.value.trim();
  const errorDiv = document.getElementById('nameError');
  errorDiv.textContent = "";

  // 1) ‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á
  if (roomNameInput === "") {
    errorDiv.textContent = "‚ö†Ô∏è Please enter a room name.";
    return;
  }
  // üëâ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏ó‡∏¢/‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ/‡∏Ç‡∏µ‡∏î‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ (‡∏Å‡∏±‡∏ô‡πÄ‡∏Ñ‡∏™‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏î‡πâ‡∏á)
  const validNamePattern = /^[A-Za-z0-9‡∏Å-‡πô _-]+$/;
  if (!validNamePattern.test(roomNameInput)) {
    errorDiv.textContent = "‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£/‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç/‡πÑ‡∏ó‡∏¢/‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á/_/- ‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô";
    return;
  }

  let code = "";
  try {
    // 2) ‡∏´‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
    console.log("[create] finding free code‚Ä¶");
    while (true) {
      code = genCode();
      const snap = await getDoc(doc(db, "rooms", code));
      if (!snap.exists()) break;
    }
    console.log("[create] code =", code);

    const maxPlayers = +document.getElementById('maxPlayers').value;
    const type = document.getElementById('roomType').value;

    // 3) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á
    const roomRef = doc(db, "rooms", code);
    console.log("[create] setDoc room‚Ä¶");
    await setDoc(roomRef, {
      code,
      name: roomNameInput,
      maxPlayers,
      type,                // public | private
      status: "lobby",     // lobby | playing | ended
      host: playerName,
      createdAt: ts()      // serverTimestamp()
    });
    console.log("[create] room created");

    // 4) ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏Å‡πá‡∏¢‡∏±‡∏á redirect ‡∏ï‡πà‡∏≠)
    try {
      console.log("[create] add first player‚Ä¶");
      await addDoc(collection(roomRef, "players"), {
        name: playerName,
        color: randColor(),
        ready: false,
        joinedAt: ts()
      });
      console.log("[create] first player added");
    } catch (e) {
      console.warn("[create] add player failed (will still redirect):", e);
      // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤ lobby
      errorDiv.textContent = "‚ö†Ô∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‚Äî ‡∏à‡∏∞‡∏û‡∏≤‡πÑ‡∏õ Lobby";
    }

    // 5) ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î ‡πÅ‡∏•‡∏∞‡πÑ‡∏õ Lobby ‚Äú‡πÄ‡∏™‡∏°‡∏≠‚Äù
    localStorage.setItem('lastRoomCode', code);
    console.log("[create] redirect to lobby with code:", code);
    window.location.href = `lobby.html?code=${code}`;

  } catch (err) {
    console.error("[create] failed:", err);
    errorDiv.textContent = `‚ö†Ô∏è Failed to create room: ${(err && err.code) || err}`;
  }
});

// üìå ‡πÄ‡∏î‡πâ‡∏á‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á
window.addEventListener("DOMContentLoaded", () => {
  const setup = document.getElementById("setup");
  if (setup) setup.classList.add("show");
});

// üìå ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏Æ‡∏™‡∏ï‡πå (‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô)
export async function deleteRoomIfHost(code) {
  if (!code) return;

  const roomRef = doc(db, "rooms", code);
  const snap = await getDoc(roomRef);
  if (!snap.exists()) return;

  const roomData = snap.data();
  if (roomData.host === playerName) {
    // ‡∏•‡∏ö players ‡∏Å‡πà‡∏≠‡∏ô
    const playersRef = collection(roomRef, "players");
    const playersSnap = await getDocs(playersRef);
    for (const p of playersSnap.docs) {
      await deleteDoc(p.ref);
    }
    await deleteDoc(roomRef);
    console.log(`‚úÖ Room ${code} deleted because host left.`);
  }
}
