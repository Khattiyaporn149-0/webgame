// Tiny animated background + UI logic + persistence
// ==============================
// üéµ SOUND (Persistent across pages)
// ==============================

// ‚úÖ ‡πÉ‡∏ä‡πâ global ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏•‡∏≠‡∏î tab
if (!window.bgm) {
  window.bgm = new Audio("assets/sounds/galaxy-283941.mp3");
  window.bgm.loop = true;
  window.bgm.volume = 0.5;

  // ‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏•‡∏±‡∏á user interaction ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏° policy browser)
  document.addEventListener("click", () => {
    window.bgm.play().catch(() => {});
  }, { once: true });
}

if (!window.clickSound) {
  window.clickSound = new Audio("assets/sounds/click.mp3");
  window.clickSound.volume = 0.8;
}

// üëá ‡πÉ‡∏ä‡πâ reference ‡πÄ‡∏î‡∏¥‡∏° (‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà)
const bgm = window.bgm;
const clickSound = window.clickSound;

// ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤
window.addEventListener("beforeunload", () => {
  if (bgm && !bgm.paused) {
    localStorage.setItem("bgmTime", bgm.currentTime);
  }
});

// ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠‡∏à‡∏∏‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
window.addEventListener("DOMContentLoaded", () => {
  const last = parseFloat(localStorage.getItem("bgmTime") || "0");
  if (bgm && !isNaN(last)) bgm.currentTime = last;
});


// üß† ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
const settings = JSON.parse(localStorage.getItem("gameSettings")) || {
  master: 1.0,
  music: 0.8,
  sfx: 0.8,
  region: "asia"
};

// üßÆ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡∏µ‡∏¢‡∏á
function updateVolumes() {
  bgm.volume = settings.master * settings.music;
  clickSound.volume = settings.master * settings.sfx;
}

// üíæ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
function saveSettings() {
  localStorage.setItem("gameSettings", JSON.stringify(settings));
  updateVolumes();
}

// üåç ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï region
function updateRegion() {
  console.log("üåê Region set to:", settings.region);
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
updateVolumes();
updateRegion();

/* ==============================
 ‚öôÔ∏è SETTINGS MODAL
============================== */

const btnSettingsTop = document.getElementById("btnSettingsTop");
const rangeMaster = document.getElementById("rangeMaster");
const rangeMusic = document.getElementById("rangeMusic");
const rangeSfx = document.getElementById("rangeSfx");
const regionSel = document.getElementById("regionSel");

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
rangeMaster.value = settings.master;
rangeMusic.value = settings.music;
rangeSfx.value = settings.sfx;
regionSel.value = settings.region;

// üéö ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏•‡πà‡∏ô
rangeMaster.addEventListener("input", e => {
  settings.master = parseFloat(e.target.value);
  saveSettings();
});

rangeMusic.addEventListener("input", e => {
  settings.music = parseFloat(e.target.value);
  saveSettings();
});

rangeSfx.addEventListener("input", e => {
  settings.sfx = parseFloat(e.target.value);
  saveSettings();
});

regionSel.addEventListener("change", e => {
  settings.region = e.target.value;
  saveSettings();
  updateRegion();
});

/* ==============================
 ü™ü OPEN / CLOSE MODAL
============================== */

// ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏á‡πÉ‡∏ô UI ‡πÄ‡∏ä‡πà‡∏ô <button id="openSettings">‚öôÔ∏è Settings</button>)
const btnOpen = document.getElementById("openSettings");
const btnClose = document.getElementById("closeSettings");

if (btnOpen) {
  btnOpen.addEventListener("click", () => {
    btnSettingsTop.style.display = "flex";
    btnSettingsTop.setAttribute("aria-hidden", "false");
  });
}

btnClose.addEventListener("click", () => {
  const modal = document.getElementById("settingsModal");
  modal.style.display = "none"; // ‡πÅ‡∏Ñ‡πà‡∏ã‡πà‡∏≠‡∏ô popup
  modal.setAttribute("aria-hidden", "true");
});
document.getElementById("settingsModal").addEventListener("click", e => {
  if (e.target === e.currentTarget) {
    e.currentTarget.style.display = "none"; // ‡πÅ‡∏Ñ‡πà‡∏ã‡πà‡∏≠‡∏ô popup
    e.currentTarget.setAttribute("aria-hidden", "true");
  }
});

/* ==============================
 üß© ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á
============================== */

// ‡∏Å‡∏î Start ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á
document.addEventListener("click", () => {
  bgm.play().catch(()=>{});
}, { once: true });

// ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏î‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å
document.addEventListener("click", () => {
  if (window.GameAudio) window.GameAudio.playClick();
  else { try { clickSound.currentTime = 0; clickSound.play(); } catch {} }
});

// ---- Background canvas particles (lightweight) ----
const canvas = document.getElementById('bg-canvas');
const ctx = canvas.getContext('2d');
let w, h, stars;
function resize() {
  w = canvas.width = window.innerWidth;
  h = canvas.height = window.innerHeight;
  stars = Array.from({length: Math.min(140, Math.floor(w*h/12000))}, () => ({
    x: Math.random()*w,
    y: Math.random()*h,
    r: Math.random()*1.8 + 0.2,
    s: Math.random()*0.5 + 0.1
  }));
}
window.addEventListener('resize', resize);
resize();
(function loop(){
  ctx.clearRect(0,0,w,h);
  ctx.fillStyle = 'rgba(255,255,255,0.8)';
  for (const st of stars) {
    ctx.globalAlpha = 0.4 + Math.sin((performance.now()/1000 + st.x)*st.s)*0.4;
    ctx.beginPath(); ctx.arc(st.x, st.y, st.r, 0, Math.PI*2); ctx.fill();
  }
  requestAnimationFrame(loop);
})();

// ---- State & persistence ----
const state = {
  name: localStorage.getItem('ggd.name') || 'Guest',
  volume: parseFloat(localStorage.getItem('ggd.vol') || '0.8'),
  music: parseFloat(localStorage.getItem('ggd.music') || '0.6'),
  sfx: parseFloat(localStorage.getItem('ggd.sfx') || '0.9'),
  region: localStorage.getItem('ggd.region') || 'asia',
  version: 'V.test1.2.1' // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏Å‡∏°
};
document.getElementById('playerNameTop').textContent = state.name;
document.getElementById('ver').textContent = state.version;

// ---- Countdown (left rail) ----
let remaining = 24*60*60; // 24h demo
const elCountdown = document.getElementById('countdown');
setInterval(() => {
  remaining = Math.max(0, remaining-1);
  const hh = String(Math.floor(remaining/3600)).padStart(2,'0');
  const mm = String(Math.floor((remaining%3600)/60)).padStart(2,'0');
  const ss = String(remaining%60).padStart(2,'0');
  elCountdown.textContent = `${hh}:${mm}:${ss}`;
}, 1000);

// -------------- Name Gate (Start Screen) --------------
const startScreen = document.getElementById("startScreen");
const startBtn = document.getElementById("startBtn");
const playerNameInput = document.getElementById("playerNameInput");

// rule: 3‚Äì16 chars, allow Thai/English/digits/space/_/-
const nameOk = (n) => {
  if (!n) return false;
  const t = n.trim();
  if (t.length < 3 || t.length > 16) return false;
  // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ä‡πâ regex: /^[\\p{L}\\p{N} _-]+$/u
  return true;
};

function applyName(t) {
  state.name = t.trim();
  localStorage.setItem("ggd.name", state.name);
  document.getElementById("playerNameTop").textContent = state.name;
}

function showStartScreen() {
  startScreen.style.display = "grid";
  document.querySelector(".wrap").style.display = "none";
  playerNameInput.value = (state.name && state.name !== 'Guest') ? state.name : '';
  playerNameInput.focus();
}

function hideStartScreen() {
  startScreen.style.display = "none";
  const wrap = document.querySelector(".wrap");
  wrap.style.display = "grid";
  requestAnimationFrame(() => wrap.classList.add("show")); // ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
}


startBtn.addEventListener("click", () => {
  const name = playerNameInput.value.trim();
  if (!nameOk(name)) {
    alert("‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡∏ß 3‚Äì16 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£");
    return;
  }
  clickSound.currentTime = 0; clickSound.volume = state.sfx * state.volume; clickSound.play();
  applyName(name);
  hideStartScreen();
});

// Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠
playerNameInput.addEventListener("keydown", (e) => {
  if (e.key === "Enter") startBtn.click();
});

// ‡πÅ‡∏™‡∏î‡∏á start screen ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á ‡πÜ
window.addEventListener("DOMContentLoaded", () => {
  const savedName = localStorage.getItem("ggd.name");
  if (savedName && nameOk(savedName)) {
    applyName(savedName);
    hideStartScreen();
  } else {
    showStartScreen();
  }
});

// helper: ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏ó‡∏≥ action
const requireNameThen = (fn) => (...args) => {
  const saved = localStorage.getItem("ggd.name");
  if (!saved || !nameOk(saved)) {
    showStartScreen();
    return;
  }
  applyName(saved);
  fn(...args);
};

// ---- Buttons ----
const settingsModal = document.getElementById('settingsModal');
document.getElementById('btnSettingsTop').addEventListener('click', () => {
  settingsModal.classList.add('show');
  // sync sliders
  if (window.GameSettings) {
    const s = window.GameSettings.get();
    document.getElementById('rangeMaster').value = s.master;
    document.getElementById('rangeMusic').value = s.music;
    document.getElementById('rangeSfx').value = s.sfx;
    document.getElementById('regionSel').value = s.region;
  }
});
document.getElementById('closeSettings').addEventListener('click', () => {
  settingsModal.classList.remove('show');
});

document.getElementById('rangeMaster').addEventListener('input', e => {
  state.volume = +e.target.value; localStorage.setItem('ggd.vol', state.volume);
});
document.getElementById('rangeMusic').addEventListener('input', e => {
  state.music = +e.target.value; localStorage.setItem('ggd.music', state.music);
});
document.getElementById('rangeSfx').addEventListener('input', e => {
  state.sfx = +e.target.value; localStorage.setItem('ggd.sfx', state.sfx);
});
document.getElementById('regionSel').addEventListener('change', e => {
  state.region = e.target.value; localStorage.setItem('ggd.region', state.region);
});

// Primary actions (hook here)
document.getElementById('btnJoin').addEventListener('click', () => {
  window.location.href = '/client/roomlist.html';

  // TODO: window.startGame && window.startGame({ mode: 'quick', ...state });
});
document.getElementById('btnCreate').addEventListener('click', () => {
  window.location.href = '/client/createroom.html';
});

// Extra buttons
document.getElementById('btnClassic').addEventListener('click', ()=> alert('‡∏™‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏ò‡∏µ‡∏°/‡πÇ‡∏´‡∏°‡∏î‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏¥‡∏Å'));
document.getElementById('btnFriends').addEventListener('click', ()=> alert('‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô'));

// ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏π‡∏õ‡∏Ñ‡∏ô: ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ
document.getElementById('btnProfile').addEventListener('click', ()=> {
  showStartScreen(); // ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
});

document.getElementById('btnWorld').addEventListener('click', ()=> alert('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ/‡∏†‡∏≤‡∏©‡∏≤'));

// Keyboard shortcut: ‡∏ñ‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ start ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ Enter ‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠
window.addEventListener('keydown', e => {
  if (e.key === 'Enter') {
    if (startScreen.style.display !== 'none') {
      startBtn.click();
    } else {
      document.getElementById('btnCreate').click();
    }
  }
});

// sound
function hideStartScreen() {
  startScreen.style.display = "none";
  const wrap = document.querySelector(".wrap");
  wrap.style.display = "grid";
  requestAnimationFrame(() => wrap.classList.add("show")); // ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
}

const btnTutorial = document.getElementById('btnTutorial');
const tutorialModal = document.getElementById('tutorialModal');
const closeTutorial = document.getElementById('closeTutorial');
const tabButtons = document.querySelectorAll('.tab-btn');
const tabPanes = document.querySelectorAll('.tab-pane');

// ‡πÄ‡∏õ‡∏¥‡∏î Popup
btnTutorial.addEventListener('click', () => {
  tutorialModal.classList.add('active');
});

// ‡∏õ‡∏¥‡∏î Popup
closeTutorial.addEventListener('click', () => {
  tutorialModal.classList.remove('active');
});

// ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å
tutorialModal.addEventListener('click', (e) => {
  if (e.target === tutorialModal) tutorialModal.classList.remove('active');
});

// ‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö
tabButtons.forEach(btn => {
  btn.addEventListener('click', () => {
    // ‡πÄ‡∏≠‡∏≤ active ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞ pane
    tabButtons.forEach(b => b.classList.remove('active'));
    tabPanes.forEach(p => p.classList.remove('active'));

    // ‡πÉ‡∏™‡πà active ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    btn.classList.add('active');
    document.getElementById(`tab-${btn.dataset.tab}`).classList.add('active');
  });

  
});

